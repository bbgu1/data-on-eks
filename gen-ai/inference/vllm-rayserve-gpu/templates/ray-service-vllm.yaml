apiVersion: ray.io/v1
kind: RayService
metadata:
  name: llm-{{ .Release.Name }}
  namespace: {{ .Release.Namspace }}
spec:
  serviceUnhealthySecondThreshold: 1800 # Config for the health check threshold for service. Default value is 60.
  deploymentUnhealthySecondThreshold: 1800 # Config for the health check threshold for deployments. Default value is 60.
  serveConfigV2: |
    applications:
      - name: {{ .Values.name }}
        import_path: "{{ if .Values.service.openAICompatible }}vllm_openai_serve{{ else }}vllm_serve{{ end }}:deployment"
        route_prefix: "/{{ .Values.name }}"
        runtime_env:
          env_vars:
            MODEL_ID: {{ .Values.modelID }}
            GPU_MEMORY_UTILIZATION: "0.9"
            MAX_MODEL_LEN: "{{ .Values.modelConfig.maxModelLen }}"
            MAX_NUM_SEQ: "{{ .Values.modelConfig.maxConcurrency }}"
            MAX_NUM_BATCHED_TOKENS: "{{ mul (.Values.modelConfig.maxModelLen) (.Values.modelConfig.maxConcurrency) }}"
            NUM_OF_GPU: "{{ .Values.modelConfig.numOfGPU }}"
            VLLM_ATTENTION_BACKEND: "XFORMERS"
        deployments:
          - name: VLLMDeployment
            autoscaling_config:
              metrics_interval_s: 0.2
              min_replicas: {{ .Values.service.minReplica }}
              max_replicas: {{ .Values.service.maxReplica }}
              look_back_period_s: 2
              downscale_delay_s: 600
              upscale_delay_s: 30
              target_num_ongoing_requests_per_replica: {{ .Values.modelConfig.maxConcurrency }}
              max_replica_per_node: 1
            graceful_shutdown_timeout_s: 5
            max_concurrent_queries: {{ mul (.Values.service.maxReplica ) (.Values.modelConfig.maxConcurrency )}}
            ray_actor_options:
              num_cpus: {{ .Values.modelConfig.numOfCPU }}
              num_gpus: {{ .Values.modelConfig.numOfGPU }}
            logging_config:
              encoding: "JSON"
              log_level: "DEBUG"
              enable_access_log: {{ .Values.service.enableAccessLog }}
  rayClusterConfig:
    rayVersion: '2.32.0' # Should match the Ray version in the image of the containers
    enableInTreeAutoscaling: true
    ######################headGroupSpecs#################################
    # Ray head pod template.
    headGroupSpec:
      headService:
        metadata:
          name: llmserve-{{ .Release.Name }}
          namespace: {{ .Release.Namspace }}
      rayStartParams:
        dashboard-host: '0.0.0.0'
        num-cpus: "0"
      # Pod template
      template:
        spec:
          containers:
          - name: ray-head
            image: {{ if eq .Values.service.backend "vLLM" }}301444719761.dkr.ecr.us-west-2.amazonaws.com/ray2.32.2-py311-vllm-gpu:v9{{ else }}{{.Values.service.image }} {{ end }} 
            imagePullPolicy: IfNotPresent
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "ray stop"]
            ports:
            - containerPort: 6379
              name: gcs
            - containerPort: 8265
              name: dashboard
            - containerPort: 10001
              name: client
            - containerPort: 8000
              name: serve
            volumeMounts:
            - mountPath: /tmp/ray
              name: ray-logs
            # resources for pulling the larger images
            resources:
              limits:
                cpu: 2
                memory: "12G"
              requests:
                cpu: 2
                memory: "12G"
            env:
            # Ensure to set VLLM_PORT to avoid conflict with Ray serve port 8000
            # We also noticed an error when trying to deploy multiple replicas in single g5 instance. "Error: torch.distributed.DistNetworkError: The server socket has failed to listen on any local network address. The server socket has failed to bind to [::]:8004 (errno: 98 - Address already in use)."
            - name: VLLM_PORT
              value: "8004"
            - name: LD_LIBRARY_PATH
              value: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
            - name: HUGGING_FACE_HUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hf-token
                  key: hf-token
            - name: RAY_GRAFANA_HOST
              value: http://kube-prometheus-stack-grafana.kube-prometheus-stack.svc:80
            - name: RAY_PROMETHEUS_HOST
              value: http://kube-prometheus-stack-prometheus.kube-prometheus-stack.svc:9090
          - name: fluentbit
            image: fluent/fluent-bit:1.9.6
              # These resource requests for Fluent Bit should be sufficient in production.
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 100m
                memory: 128Mi
            volumeMounts:
            - mountPath: /tmp/ray
              name: ray-logs
            - mountPath: /fluent-bit/etc/fluent-bit.conf
              subPath: fluent-bit.conf
              name: fluentbit-config
          nodeSelector:
            NodeGroupType: x86-cpu-karpenter
            type: karpenter
          volumes:
          - name: ray-logs
            emptyDir: {}
          - name: fluentbit-config
            configMap:
              name: fluentbit-config
#            hostPath: 
#              path: /var/log/containers/ray
#              type: DirectoryOrCreate
    workerGroupSpecs:
    # The pod replicas in this group typed worker
    - groupName: gpu-group
      replicas: 1
      minReplicas: 1
      maxReplicas: 4
      rayStartParams: {}
      # Pod template
      template:
        spec:
          containers:
          - name: ray-worker
            image: {{ if eq .Values.service.backend "vLLM" }}301444719761.dkr.ecr.us-west-2.amazonaws.com/ray2.32.2-py311-vllm-gpu:v9{{ else }}{{.Values.service.image }} {{ end }} 
            imagePullPolicy: IfNotPresent
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "ray stop"]
            volumeMounts:
            - mountPath: /tmp/ray
              name: ray-logs
            resources:
              limits:
                cpu: {{ .Values.modelConfig.numOfCPU }}
                memory: "{{ mul (.Values.modelConfig.numOfCPU) 4 }}G"
                nvidia.com/gpu: {{ .Values.modelConfig.numOfGPU }}
              requests:
                cpu: {{ .Values.modelConfig.numOfCPU }}
                memory: "{{ mul (.Values.modelConfig.numOfCPU) 4 }}G"
                nvidia.com/gpu: {{ .Values.modelConfig.numOfGPU  }}
            env:
            # Ensure to set VLLM_PORT to avoid conflict with Ray serve port 8000
            - name: VLLM_PORT
              value: "8004"
            - name: LD_LIBRARY_PATH
              value: "/home/ray/anaconda3/lib:$LD_LIBRARY_PATH"
            - name: HUGGING_FACE_HUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hf-token
                  key: hf-token
          - name: fluentbit
            image: fluent/fluent-bit:1.9.6
              # These resource requests for Fluent Bit should be sufficient in production.
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 100m
                memory: 128Mi
            volumeMounts:
            - mountPath: /tmp/ray
              name: ray-logs
            - mountPath: /fluent-bit/etc/fluent-bit.conf
              subPath: fluent-bit.conf
              name: fluentbit-config
          nodeSelector:
            NodeGroupType: {{ .Values.service.gpu }}-gpu-karpenter
            type: karpenter
          volumes:
          - name: ray-logs
            emptyDir: {}
          - name: fluentbit-config
            configMap:
              name: fluentbit-config
          # Please add the following taints to the GPU node.
          tolerations:
          - key: "nvidia.com/gpu"
            operator: "Exists"
            effect: "NoSchedule"
